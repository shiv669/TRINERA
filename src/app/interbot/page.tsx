"use client"

import React, { useState, useRef, useEffect, useCallback } from "react"
import { cn } from "@/lib/utils"
import { ArrowUpIcon, Upload, Loader2 } from "lucide-react"
import { Button } from "@/components/button"
import { Tooltip, TooltipContent, TooltipTrigger, TooltipProvider } from "@/components/ui/tooltip"
import ReactMarkdown from "react-markdown"
import config from "@/lib/config"
import remarkGfm from "remark-gfm"

// Message type definition
type Message = {
  role: "user" | "assistant" | "system"
  content: string
  imageUrl?: string
  videoUrl?: string
  heatmapUrl?: string
}

// Chat state types
type ChatState =
  | "initial"
  | "language_selected"
  | "main_menu"
  | "pest_identification"
  | "awaiting_image"
  | "analyzing_image"
  | "pest_result"
  | "live_mode"  // NEW: Live mode for real-time interaction

export default function Page() {
  // State management
  const [messages, setMessages] = useState<Message[]>([
    {
      role: "assistant",
      content:
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! Welcome to Trinera - Your AI farming assistant. Which language do you prefer?\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
    },
  ])
  const [input, setInput] = useState("")
  const [language, setLanguage] = useState<"english" | "hindi">("english")
  const [chatState, setChatState] = useState<ChatState>("initial")
  const [isProcessing, setIsProcessing] = useState(false)
  const [sessionId, setSessionId] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)

  const fileInputRef = useRef<HTMLInputElement>(null)
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Memoized input handler to prevent cursor jumping
  const handleInputChange = useCallback((value: string) => {
    setInput(value)
  }, [])

  // Auto-scroll to bottom of messages
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  // Clean up media stream when component unmounts (for live mode)
  useEffect(() => {
    return () => {
      if (videoRef.current && videoRef.current.srcObject) {
        const stream = videoRef.current.srcObject as MediaStream
        stream.getTracks().forEach((track: MediaStreamTrack) => track.stop())
      }
    }
  }, [])

  // Handle language selection
  const selectLanguage = (lang: "english" | "hindi") => {
    setLanguage(lang)
    setChatState("language_selected")

    const welcomeMessage =
      lang === "english"
        ? "Thank you for choosing English. Trinera is a pest detection system that helps farmers identify and manage pests in their farmland. How can I help you today?"
        : "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶‡•§ ‡§§‡•ç‡§∞‡§ø‡§®‡•á‡§∞‡§æ ‡§è‡§ï ‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§π‡•à ‡§ú‡•ã ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§â‡§®‡§ï‡•á ‡§ñ‡•á‡§§ ‡§Æ‡•á‡§Ç ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?"

    setMessages((prev) => [
      ...prev,
      { role: "user", content: lang === "english" ? "English" : "‡§π‡§ø‡§Ç‡§¶‡•Ä" },
      { role: "assistant", content: welcomeMessage },
    ])

    setTimeout(() => {
      showMainMenu()
    }, 1000)
  }

  // Show main menu options
  const showMainMenu = () => {
    setChatState("main_menu")

    const menuMessage =
      language === "english"
        ? "Please select what you'd like to do:\n\n1. Identify if a specific pest is harmful\n2. Scan my farmland for harmful pests"
        : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç:\n\n1. ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•Ä‡§ü ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§π‡•à\n2. ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§ï‡•Ä‡§ü‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•á‡§∞‡•á ‡§ñ‡•á‡§§ ‡§ï‡•ã ‡§∏‡•ç‡§ï‡•à‡§® ‡§ï‡§∞‡•á‡§Ç"

    setMessages((prev) => [...prev, { role: "assistant", content: menuMessage }])
  }

  // Handle main menu selection
  const handleMenuSelection = (option: number) => {
    if (option === 1) {
      setChatState("pest_identification")
      const message =
        language === "english"
          ? "Please upload a clear photo of the pest you want to identify."
          : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§â‡§∏ ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§è‡§ï ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡•á ‡§Ü‡§™ ‡§™‡§π‡§ö‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç‡•§"

      setMessages((prev) => [
        ...prev,
        {
          role: "user",
          content:
            language === "english"
              ? "I want to identify if a specific pest is harmful"
              : "‡§Æ‡•à‡§Ç ‡§™‡§π‡§ö‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡•Ä‡§ü ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§π‡•à",
        },
        { role: "assistant", content: message },
      ])
      setChatState("awaiting_image")
    } else if (option === 2) {
      // Option 2 is now Live Mode - handled by toggleLiveMode button
      // This is kept for backward compatibility but won't be called
      const message =
        language === "english"
          ? "Please use the Live Mode button to start real-time pest detection."
          : "‡§ï‡•É‡§™‡§Ø‡§æ ‡§∞‡•Ä‡§Ø‡§≤-‡§ü‡§æ‡§á‡§Æ ‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡§æ‡§á‡§µ ‡§Æ‡•ã‡§° ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§"

      setMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          content: message,
        },
      ])
    }
  }

  // Handle image upload
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (!file) return

    setImageFile(file)
    const imageUrl = URL.createObjectURL(file)

    setMessages((prev) => [
      ...prev,
      {
        role: "user",
        content: language === "english" ? "I've uploaded an image of the pest." : "‡§Æ‡•à‡§Ç‡§®‡•á ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§π‡•à‡•§",
        imageUrl,
      },
    ])

    // Pass the file directly to avoid async state issues
    analyzePestImage(imageUrl, file)
  }

  // Analyze pest image using FastAPI backend
  const analyzePestImage = async (imageUrl: string, file?: File) => {
    setChatState("analyzing_image")
    setIsProcessing(true)

    const analysisMessage =
      language === "english"
        ? "Analyzing your image... Please wait while I identify the pest."
        : "‡§Ü‡§™‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§"

    setMessages((prev) => [...prev, { role: "assistant", content: analysisMessage }])

    try {
      // Use the file parameter if provided, otherwise fall back to imageFile state
      const fileToUpload = file || imageFile
      
      if (!fileToUpload) {
        throw new Error("No image file available")
      }

      // Prepare form data for API request
      const formData = new FormData()
      formData.append("file", fileToUpload)
      formData.append("language", language)

      // Create abort controller with 150 second timeout (HF Space needs ~40s for inference)
      const controller = new AbortController()
      const timeoutId = setTimeout(() => controller.abort(), 150000) // 150 seconds

      // Call FastAPI backend
      const response = await fetch(config.endpoints.pestDetection, {
        method: "POST",
        body: formData,
        signal: controller.signal,
      })
      clearTimeout(timeoutId)

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || "Failed to analyze image")
      }

      const result = await response.json()

      if (!result.success) {
        throw new Error(result.error || "Analysis failed")
      }

      // Store session_id for AI chat context
      if (result.session_id) {
        setSessionId(result.session_id)
      }

      // Format the result message
      const pestData = result.prediction
      const pestDetails = result.details

      const resultMessage =
        language === "english"
          ? `## üêõ Pest Identified: ${pestData.label}

**Status:** ${pestData.is_harmful ? "‚ö†Ô∏è Harmful to crops" : "‚úÖ Generally not harmful"}

**Detection Confidence:** ${(pestData.confidence * 100).toFixed(1)}%

---

### üìã Description
${pestDetails.description}

### üåæ How It Spreads
${pestDetails.spread_method}

### ‚úÖ Recommended Precautions

${pestDetails.precautions.map((p: string, i: number) => `${i + 1}. ${p}`).join("\n")}

---

### üí¨ Ask Me Anything!

You can now ask questions like:
- "How do I control this pest?"
- "What organic solutions are available?"
- "How long does treatment take?"
- "What's the estimated cost?"

*Type "menu" to return to the main menu*`
          : `## üêõ ‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®: ${pestData.label}

**‡§∏‡•ç‡§•‡§ø‡§§‡§ø:** ${pestData.is_harmful ? "‚ö†Ô∏è ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï" : "‚úÖ ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§π‡§æ‡§®‡§ø‡§ï‡§æ‡§∞‡§ï ‡§®‡§π‡•Ä‡§Ç"}

**‡§™‡§π‡§ö‡§æ‡§® ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏:** ${(pestData.confidence * 100).toFixed(1)}%

---

### üìã ‡§µ‡§ø‡§µ‡§∞‡§£
${pestDetails.description}

### üåæ ‡§ï‡•à‡§∏‡•á ‡§´‡•à‡§≤‡§§‡§æ ‡§π‡•à
${pestDetails.spread_method}

### ‚úÖ ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç

${pestDetails.precautions.map((p: string, i: number) => `${i + 1}. ${p}`).join("\n")}

---

### üí¨ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç!

‡§Ü‡§™ ‡§á‡§∏ ‡§§‡§∞‡§π ‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
- "‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§ï‡•Ä‡§ü ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§ø‡§§ ‡§ï‡§∞‡•Ç‡§Ç?"
- "‡§ú‡•à‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•ç‡§Ø‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•à‡§Ç?"
- "‡§â‡§™‡§ö‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡§æ ‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡§§‡§æ ‡§π‡•à?"
- "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§≤‡§æ‡§ó‡§§ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?"

*‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç ‡§™‡§∞ ‡§≤‡•å‡§ü‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "‡§Æ‡•á‡§®‡•Ç" ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç*`

      setMessages((prev) => [...prev.slice(0, -1), { role: "assistant", content: resultMessage }])
      setIsProcessing(false)
      setChatState("pest_result")
    } catch (error) {
      console.error("Error analyzing image:", error)
      
      let errorMessage = ""
      
      if (error instanceof Error) {
        // Check for timeout/abort error
        if (error.name === 'AbortError') {
          errorMessage = language === "english"
            ? "‚è±Ô∏è Request Timeout: The pest detection is taking longer than expected (>150 seconds). The AI model might be processing other requests. Please try again in a moment."
            : "‚è±Ô∏è ‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§: ‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§® ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§≤‡•á ‡§∞‡§π‡•Ä ‡§π‡•à (>150 ‡§∏‡•á‡§ï‡§Ç‡§°)‡•§ AI ‡§Æ‡•â‡§°‡§≤ ‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        }
        // Check for specific error types
        else if (error.message.includes("Failed to process image") || error.message.includes("500")) {
          errorMessage = language === "english"
            ? "‚ö†Ô∏è Backend Error: The pest detection service encountered an issue. This is usually due to:\n\n1. Invalid HuggingFace token\n2. Service temporarily unavailable\n\nPlease check the backend logs or try again in a moment."
            : "‚ö†Ô∏è ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§® ‡§∏‡•á‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à‡•§ ‡§Ø‡§π ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§á‡§® ‡§ï‡§æ‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§π‡•ã‡§§‡§æ ‡§π‡•à:\n\n1. ‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø HuggingFace ‡§ü‡•ã‡§ï‡§®\n2. ‡§∏‡•á‡§µ‡§æ ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§Ö‡§®‡•Å‡§™‡§≤‡§¨‡•ç‡§ß\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡•à‡§ï‡§è‡§Ç‡§° ‡§≤‡•â‡§ó ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
        } else {
          errorMessage = language === "english"
            ? `Sorry, I encountered an error: ${error.message}\n\nPlease try again or upload a different image.`
            : `‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: ${error.message}\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç‡•§`
        }
      } else {
        errorMessage = language === "english"
          ? "An unexpected error occurred. Please try again."
          : "‡§è‡§ï ‡§Ö‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§æ‡§∂‡§ø‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
      }

      setMessages((prev) => [...prev.slice(0, -1), { role: "assistant", content: errorMessage }])
      setIsProcessing(false)
      setChatState("awaiting_image")  // Reset to allow retry
    }
  }

  // Send message to AI chat (Groq LLM)
  const sendChatMessage = async (message: string) => {
    try {
      setIsProcessing(true)

      const response = await fetch(config.endpoints.chat, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          message,
          session_id: sessionId,
          language: language || "english",
        }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.detail || "Failed to get AI response")
      }

      const result = await response.json()

      // Update or set session_id
      if (result.session_id) {
        setSessionId(result.session_id)
      }

      // Add AI response to messages
      setMessages((prev) => [...prev, { role: "assistant", content: result.response }])
      setIsProcessing(false)
    } catch (error) {
      console.error("Error sending chat message:", error)

      const errorMessage =
        language === "english"
          ? `Sorry, I encountered an error: ${error instanceof Error ? error.message : "Unknown error"}. Please try again.`
          : `‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•Å‡§à: ${error instanceof Error ? error.message : "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø"}‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§`

      setMessages((prev) => [...prev, { role: "assistant", content: errorMessage }])
      setIsProcessing(false)
    }
  }

  // Navigate to Live Mode page
  const toggleLiveMode = () => {
    window.location.href = "/interbot/live"
  }

  // Handle form submission
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    if (!input.trim()) return

    const userMessage = input.trim()
    setInput("")

    // Add user message
    setMessages((prev) => [...prev, { role: "user", content: userMessage }])

    // Process based on current state
    if (chatState === "initial") {
      if (userMessage.toLowerCase().includes("english")) {
        selectLanguage("english")
      } else if (userMessage.toLowerCase().includes("hindi") || userMessage.toLowerCase().includes("‡§π‡§ø‡§Ç‡§¶‡•Ä")) {
        selectLanguage("hindi")
      } else {
        // If language not detected, ask again
        const promptMessage = "I didn't understand your language preference. Please type 'English' or '‡§π‡§ø‡§Ç‡§¶‡•Ä'."
        setMessages((prev) => [...prev, { role: "assistant", content: promptMessage }])
      }
    } else if (chatState === "main_menu") {
      if (userMessage.includes("1") || userMessage.toLowerCase().includes("identify") || userMessage.toLowerCase().includes("pest")) {
        handleMenuSelection(1)
      } else if (
        userMessage.includes("2") ||
        userMessage.toLowerCase().includes("scan") ||
        userMessage.toLowerCase().includes("farmland")
      ) {
        handleMenuSelection(2)
      } else {
        // For any other question in main menu, use AI chat
        sendChatMessage(userMessage)
      }
    } else if (chatState === "pest_result") {
      // After pest detection, allow follow-up questions to AI
      // Check if user wants to return to menu
      if (
        userMessage.toLowerCase().includes("menu") ||
        userMessage.toLowerCase().includes("back") ||
        userMessage.toLowerCase().includes("‡§Æ‡•á‡§®‡•Ç") ||
        userMessage.toLowerCase().includes("‡§µ‡§æ‡§™‡§∏")
      ) {
        showMainMenu()
      } else {
        // Send question to AI with pest context
        sendChatMessage(userMessage)
      }
    } else if (chatState === "live_mode") {
      // In live mode, all text input goes through AI with visual context
      sendChatMessage(userMessage)
    }
  }

  // Handle key press in textarea
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      const form = e.currentTarget.form
      if (form) form.requestSubmit()
    }
  }

  // Auto-resize textarea
  const AutoResizeTextarea = React.forwardRef<
    HTMLTextAreaElement,
    Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'onChange'> & {
      onChange: (value: string) => void
    }
  >(({ value, onChange, ...props }, ) => {
    const textareaRef = useRef<HTMLTextAreaElement>(null)

    const resizeTextarea = useCallback(() => {
      const textarea = textareaRef.current
      if (textarea) {
        textarea.style.height = "auto"
        textarea.style.height = `${textarea.scrollHeight}px`
      }
    }, [])

    useEffect(() => {
      resizeTextarea()
    }, [value, resizeTextarea])

    const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {
      onChange(e.target.value)
    }, [onChange])

    return (
      <textarea
        {...props}
        value={value}
        ref={textareaRef}
        rows={1}
        onChange={handleChange}
        className={cn("resize-none min-h-4 max-h-80", props.className)}
      />
    )
  })

  AutoResizeTextarea.displayName = "AutoResizeTextarea"

  // Render message content with images/videos/heatmaps
  const renderMessageContent = (message: Message) => {
    return (
      <div className="flex flex-col gap-2">
        <div className="prose prose-sm max-w-none">
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            components={{
              // Headings
              h1: ({ ...props }) => <h1 className="text-xl font-bold mb-2 mt-3" {...props} />,
              h2: ({ ...props }) => <h2 className="text-lg font-bold mb-2 mt-3" {...props} />,
              h3: ({ ...props }) => <h3 className="text-base font-bold mb-1 mt-2" {...props} />,
              
              // Paragraphs
              p: ({ ...props }) => <p className="mb-2 leading-relaxed" {...props} />,
              
              // Bold text
              strong: ({ ...props }) => <strong className="font-bold text-gray-900" {...props} />,
              
              // Lists
              ul: ({ ...props }) => <ul className="list-disc list-inside mb-2 space-y-1" {...props} />,
              ol: ({ ...props }) => <ol className="list-decimal list-inside mb-2 space-y-1" {...props} />,
              li: ({ ...props }) => <li className="ml-2" {...props} />,
              
              // Code blocks
              code: ({ ...props }) => <code className="bg-gray-100 px-1 py-0.5 rounded text-sm" {...props} />,
              
              // Horizontal rule
              hr: ({ ...props }) => <hr className="my-3 border-gray-300" {...props} />,
              
              // Links
              a: ({ ...props }) => (
                <a className="text-blue-500 hover:text-blue-600 underline" target="_blank" rel="noopener noreferrer" {...props} />
              ),
            }}
          >
            {message.content}
          </ReactMarkdown>
        </div>

        {message.imageUrl && (
          <div className="mt-2 relative">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={message.imageUrl || "/placeholder.svg"}
              alt="Uploaded pest"
              className="rounded-md max-w-full max-h-60 object-contain"
            />
            {chatState === "analyzing_image" && (
              <div className="absolute inset-0 bg-black/30 flex items-center justify-center rounded-md">
                <div className="text-white text-center">
                  <Loader2 className="h-8 w-8 animate-spin mx-auto mb-2" />
                  <p>{language === "english" ? "Analyzing image..." : "‡§õ‡§µ‡§ø ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à..."}</p>
                </div>
              </div>
            )}
          </div>
        )}

        {message.videoUrl && (
          <div className="mt-2">
            <video src={message.videoUrl} controls className="rounded-md max-w-full max-h-60 object-contain" />
          </div>
        )}

        {message.heatmapUrl && (
          <div className="mt-2">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={message.heatmapUrl || "/placeholder.svg"}
              alt="Pest heatmap"
              className="rounded-md max-w-full max-h-80 object-contain border border-gray-200"
            />
            <div className="flex justify-between text-xs mt-1 text-gray-500">
              <span>üü¢ {language === "english" ? "Low pest activity" : "‡§ï‡§Æ ‡§ï‡•Ä‡§ü ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø"}</span>
              <span>üü° {language === "english" ? "Moderate" : "‡§Æ‡§ß‡•ç‡§Ø‡§Æ"}</span>
              <span>üî¥ {language === "english" ? "High pest activity" : "‡§â‡§ö‡•ç‡§ö ‡§ï‡•Ä‡§ü ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø"}</span>
            </div>
          </div>
        )}
      </div>
    )
  }

  return (
    <TooltipProvider delayDuration={0}>
      <main className="mx-auto flex h-svh max-h-svh w-full max-w-[35rem] flex-col items-stretch border-none">
        <div className="flex-1 content-center overflow-y-auto px-6">
          <div className="my-4 flex h-fit min-h-full flex-col gap-4">
            {messages.map((message, index) => (
              <div
                key={index}
                data-role={message.role}
                className="max-w-[90%] rounded-xl px-4 py-3 text-sm data-[role=assistant]:self-start data-[role=user]:self-end data-[role=assistant]:bg-gray-50 data-[role=user]:bg-blue-500 data-[role=assistant]:text-black data-[role=user]:text-white data-[role=assistant]:border data-[role=assistant]:border-gray-200"
              >
                {renderMessageContent(message)}
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </div>

        {/* Hidden file input for image upload */}
        <input type="file" ref={fileInputRef} accept="image/*" className="hidden" onChange={handleImageUpload} />

        {/* Hidden canvas for frame capture */}
        <canvas ref={canvasRef} className="hidden" />

        {/* Action buttons for specific states */}
        {chatState === "initial" && (
          <div className="mx-6 mb-2 flex gap-2">
            <Button onClick={() => selectLanguage("english")} className="flex-1" variant="outline">
              English
            </Button>
            <Button onClick={() => selectLanguage("hindi")} className="flex-1" variant="outline">
              ‡§π‡§ø‡§Ç‡§¶‡•Ä
            </Button>
          </div>
        )}

        {chatState === "main_menu" && (
          <div className="mx-6 mb-2 flex gap-2">
            <Button onClick={() => handleMenuSelection(1)} className="flex-1" variant="outline">
              {language === "english" ? "Identify Pest" : "‡§ï‡•Ä‡§ü ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç"}
            </Button>
            <Button onClick={toggleLiveMode} className="flex-1" variant="outline">
              {language === "english" ? "üéôÔ∏è Live Mode" : "üéôÔ∏è ‡§≤‡§æ‡§á‡§µ ‡§Æ‡•ã‡§°"}
            </Button>
          </div>
        )}

        {chatState === "awaiting_image" && (
          <div className="mx-6 mb-2">
            <Button
              onClick={() => fileInputRef.current?.click()}
              className="w-full flex items-center gap-2"
              variant="outline"
            >
              <Upload size={16} />
              {language === "english" ? "Upload Pest Image" : "‡§ï‡•Ä‡§ü ‡§ï‡•Ä ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"}
            </Button>
          </div>
        )}

        {/* Chat input form */}
        <form
          onSubmit={handleSubmit}
          className="border-input bg-background focus-within:ring-ring/10 relative mx-6 mb-6 flex items-center gap-2 rounded-[16px] border px-3 py-1.5 text-sm focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-0"
        >
          {/* Upload button (left side) */}
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                type="button"
                size="sm"
                onClick={() => fileInputRef.current?.click()}
                className="size-8 rounded-full bg-gray-200 hover:bg-gray-300 text-gray-700 p-0 flex items-center justify-center shrink-0"
                disabled={isProcessing || chatState === "awaiting_image"}
              >
                <Upload size={16} />
              </Button>
              </TooltipTrigger>
              <TooltipContent sideOffset={12}>
                {language === "english" ? "Upload image" : "‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç"}
              </TooltipContent>
            </Tooltip>

          <AutoResizeTextarea
            onKeyDown={handleKeyDown}
            onChange={handleInputChange}
            value={input}
            placeholder={language === "english" ? "Type a message..." : "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç..."}
            className="placeholder:text-muted-foreground flex-1 bg-transparent focus:outline-none"
            disabled={isProcessing || chatState === "awaiting_image"}
          />

          {/* Live mode button (right side when not in live mode) */}
          {chatState !== "awaiting_image" && (
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  type="button"
                  size="sm"
                  onClick={toggleLiveMode}
                  className="size-8 rounded-full bg-green-500 hover:bg-green-600 text-white p-0 flex items-center justify-center shrink-0"
                  disabled={isProcessing}
                >
                  üéôÔ∏è
                </Button>
              </TooltipTrigger>
              <TooltipContent sideOffset={12}>
                {language === "english" ? "Start Live Mode" : "‡§≤‡§æ‡§á‡§µ ‡§Æ‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç"}
              </TooltipContent>
            </Tooltip>
          )}

          {/* Send button (always present) */}
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                type="submit"
                size="sm"
                className="size-8 rounded-full bg-blue-500 hover:bg-blue-600 text-white p-0 flex items-center justify-center shrink-0"
                disabled={isProcessing || chatState === "awaiting_image" || !input.trim()}
              >
                {isProcessing ? <Loader2 size={16} className="animate-spin" /> : <ArrowUpIcon size={16} />}
              </Button>
            </TooltipTrigger>
            <TooltipContent sideOffset={12}>
              {language === "english" ? "Send message" : "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç"}
            </TooltipContent>
          </Tooltip>
        </form>
      </main>
    </TooltipProvider>
  )
}

